name: Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout # Don't use actions/checkout@v2 because we need the tags
        run: | 
          git clone https://github.com/partyoffice/spotifete.git ./
          git checkout -f master

      - name: Get merged pull request
        id: merged-pr
        uses: remihq/action-get-merged-pull-request@v1
        with:
          github_token: ${{ github.token }}

      - name: Set release version
        id: release-version
        env:
          PR_TITLE: ${{ steps.merged-pr.outputs.title }}
          PR_LABELS: ${{ steps.merged-pr.outputs.labels }}
        run: |
          VERSION_TAG=$(git describe --tags)
          VERSION_MAJOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\1/')
          VERSION_MINOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\2/')
          VERSION_PATCH=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\3/')

          if [[ $PR_TITLE = Feature:* ]] || [[ $PR_LABELS = *Feature* ]]
          then
            RELEASE_VERSION_MAJOR=$VERSION_MAJOR
            RELEASE_VERSION_MINOR=$((VERSION_MINOR+1))
            RELEASE_VERSION_PATCH=0
          else
            RELEASE_VERSION_MAJOR=$VERSION_MAJOR
            RELEASE_VERSION_MINOR=$VERSION_MINOR
            RELEASE_VERSION_PATCH=$((VERSION_PATCH+1))
          fi

          RELEASE_VERSION=$RELEASE_VERSION_MAJOR.$RELEASE_VERSION_MINOR.$RELEASE_VERSION_PATCH
          echo "::set-output name=release_version::$RELEASE_VERSION"

      - name: Print release version
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.release_version }}
        run: echo $RELEASE_VERSION
