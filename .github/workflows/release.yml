name: Release

on:
  push:
    branches:
      - ci-testing

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout master
        run: | 
          git clone https://github.com/partyoffice/spotifete.git ./
          git checkout -f master

      - name: Evaluate version
        run: |
          VERSION=`git describe --tags | sed 's/v\([^-]*\)-.*/\1/'`
          IFS='.'; VERSION_PARTS=($VERSION); UNSET IFS
          VERSION_MAJOR=${VERSION_PARTS[0]}
          VERSION_MINOR=${VERSION_PARTS[1]}
          VERSION_PATCH=${VERSION_PARTS[2]}
          echo Major: $VERSION_MAJOR
          echo Minor: $VERSION_MINOR
          echo Patch: $VERSION_PATCH

      - name: Create release tag
        run: |
          git tag v${{ github.event.inputs.version }}
          git push https://Nikos410:${{ secrets.GITHUB_TOKEN }}@github.com/partyoffice/spotifete.git v${{ github.event.inputs.version }}

      - name: Merge master back into develop
        run: |
          git checkout -f develop
          git merge --ff-only master
          git push https://Nikos410:${{ secrets.GITHUB_TOKEN }}@github.com/partyoffice/spotifete.git develop

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build executable
        run: CGO_ENABLED=0 go build -v -o ./ ./...

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Build
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: nikos410/spotifete:${{ github.event.inputs.version }}

      - name: Publish release
        id: publish-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: 'Release v${{ github.event.inputs.version }}'
          draft: false
          prerelease: false

      - name: Package files for release
        run: tar -cvzf spotifete-v${{ github.event.inputs.version }}.tar.gz ./spotifete ./resources ./LICENSE

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.publish-release.outputs.upload_url }}
          asset_path: spotifete-v${{ github.event.inputs.version }}.tar.gz
          asset_name: spotifete-v${{ github.event.inputs.version }}.tar.gz
          asset_content_type: application/gzip
