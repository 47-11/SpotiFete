name: Release

on:
  push:
    branches:
      - ci-testing

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout # Don't use actions/checkout@v2 because we need the tags
        run: | 
          git clone https://github.com/partyoffice/spotifete.git ./
          git checkout -f ci-testing

      - name: Get merged pull request
        id: merged-pr
        uses: remihq/action-get-merged-pull-request@v1
        with:
          github_token: ${{ github.token }}

      - name: Set release version
        id: release-version
        env:
          PR_TITLE: ${{ steps.merged-pr.outputs.title }}
          PR_LABELS: ${{ steps.merged-pr.outputs.labels }}
        run: |
          VERSION_TAG=$(git describe --tags)
          VERSION_MAJOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\1/')
          VERSION_MINOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\2/')
          VERSION_PATCH=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\3/')

          if [[ $PR_TITLE = Feature:* ]] || [[ $PR_LABELS = *Feature* ]]
          then
            RELEASE_VERSION_MAJOR=$VERSION_MAJOR
            RELEASE_VERSION_MINOR=$((VERSION_MINOR+1))
            RELEASE_VERSION_PATCH=0
          else
            RELEASE_VERSION_MAJOR=$VERSION_MAJOR
            RELEASE_VERSION_MINOR=$VERSION_MINOR
            RELEASE_VERSION_PATCH=$((VERSION_PATCH+1))
          fi

          RELEASE_VERSION=$RELEASE_VERSION_MAJOR.$RELEASE_VERSION_MINOR.$RELEASE_VERSION_PATCH
          echo "::set-output name=release_version::$RELEASE_VERSION"

      - name: Create release tag
        run: |
          git tag v${{ steps.release-version.outputs.release_version }}
          git push https://Nikos410:${{ secrets.GITHUB_TOKEN }}@github.com/partyoffice/spotifete.git v${{ steps.release-version.outputs.release_version }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build executable
        run: CGO_ENABLED=0 go build -v -o ./ ./...

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Build
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: nikos410/spotifete:${{ steps.release-version.outputs.release_version }},nikos410/spotifete:latest

      - name: Publish release
        id: publish-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.release-version.outputs.release_version }}
          release_name: Release v${{ steps.release-version.outputs.release_version }}
          body: ${{ steps.merged-pr.outputs.title }}
          draft: false
          prerelease: false

      - name: Package files for release
        run: tar -cvzf spotifete-v${{ steps.release-version.outputs.release_version }}.tar.gz ./spotifete ./resources ./LICENSE

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.publish-release.outputs.upload_url }}
          asset_path: spotifete-v${{ steps.release-version.outputs.release_version }}.tar.gz
          asset_name: spotifete-v${{ steps.release-version.outputs.release_version }}.tar.gz
          asset_content_type: application/gzip
