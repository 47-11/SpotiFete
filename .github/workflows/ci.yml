name: CI

on:
  push:
    branches:
      - ci-testing
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Check formatting
        run: go fmt ./... && git diff --exit-code

  release:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/ci-testing' }}

    steps:
      - name: Checkout # Don't use actions/checkout@v2 because we need the tags
        run: | 
          git clone https://github.com/partyoffice/spotifete.git ./
          git checkout -f master

      - name: Get merged pull request
        id: merged-pr
        uses: remihq/action-get-merged-pull-request@v1
        with:
          github_token: ${{ github.token }}

      - name: Evaluate previous version
        id: previous-version
        run: |
          VERSION_TAG=$(git describe --tags)
          VERSION_MAJOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\1/')
          VERSION_MINOR=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\2/')
          VERSION_PATCH=$(echo $VERSION_TAG | sed -r 's/[^0-9]*([0-9]+)[.]([0-9]+)[.]([0-9])+.*/\3/')
          echo "::set-output name=version_major::$VERSION_MAJOR"
          echo "::set-output name=version_minor::$VERSION_MINOR"
          echo "::set-output name=version_patch::$VERSION_PATCH"

      - name: Set release version (Feature)
        id: release-version
        #if: ${{ startsWith(steps.merged-pr.outputs.title, 'Feature:') || contains(steps.merged-pr.outputs.title, 'labels') }}
        env:
          VERSION_MAJOR: ${{ steps.previous-version.outputs.version_major }}
          VERSION_MINOR: ${{ steps.previous-version.outputs.version_minor }}
          VERSION_PATCH: ${{ steps.previous-version.outputs.version_patch }}
        run: |
          RELEASE_VERSION_MINOR=$((VERSION_MINOR+1))
          RELEASE_VERSION_PATCH=0
          RELEASE_VERSION=$VERSION_MAJOR.$RELEASE_VERSION_MINOR.$RELEASE_VERSION_PATCH
          echo "::set-output name=release_version::$RELEASE_VERSION"

      - name: Print release version
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.release_version }}
        run: echo $RELEASE_VERSION
